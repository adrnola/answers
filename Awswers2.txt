https://aws.amazon.com/codebuild/pricing/


AWS CodeBuild employs a pay-as-you-go pricing model, charging based on the compute resources utilized during the build process. There are no upfront costs or minimum fees; you pay only for the resources you use. 
AMAZON WEB SERVICES

Key Components of CodeBuild Pricing:

Build Duration:

Charges are calculated from the time you submit your build until it completes, rounded up to the nearest minute. 
AMAZON WEB SERVICES
Compute Types:

CodeBuild offers various compute instance types with different amounts of memory and CPU. The per-minute rate depends on the selected compute type. 
AMAZON WEB SERVICES
AWS Free Tier:

The CodeBuild AWS Free Tier includes 100 total build minutes per month with the general1.small or arm1.small instance types using on-demand Amazon EC2. 
AMAZON WEB SERVICES
Additional Charges:

You may incur additional charges if your builds transfer data or use other AWS services. For example, you may incur charges from Amazon CloudWatch Logs for build log streams, Amazon Simple Storage Service (Amazon S3) for build artifact storage, and AWS Key Management Service (AWS KMS) for encryption. 
AMAZON WEB SERVICES
For a detailed breakdown of pricing and to calculate your costs, refer to the AWS CodeBuild Pricing page.


What is the underlying technology AWS CodeBuild runs on EC2?
ChatGPT said:
ChatGPT
AWS CodeBuild runs on Amazon EC2 instances as its underlying infrastructure, specifically using containers orchestrated within the EC2 environment. Here's how CodeBuild operates technically:

EC2 Instances and Compute Isolation:

CodeBuild launches isolated EC2 instances to execute builds. Each build runs in its own isolated environment, ensuring security and separation across builds.
CodeBuild provides several compute types with different CPU and memory configurations, which are provisioned as EC2 instances based on the requirements of your build project.
Docker-Based Build Environments:

CodeBuild uses Docker containers to encapsulate the build environments. This allows builds to run within Docker images, which include language runtimes, frameworks, and other dependencies needed for building applications.
AWS provides a set of pre-configured Docker images for common environments (like Node.js, Python, Java), but you can also define custom images in Amazon ECR (Elastic Container Registry) or other Docker repositories.
Auto-Scaling and On-Demand Infrastructure:

CodeBuild automatically provisions, scales, and terminates EC2 instances as needed to handle build requests, ensuring that resources are only used when necessary.
Each build request triggers the instantiation of a new EC2 instance (or container within an EC2 instance) to perform the build tasks, allowing CodeBuild to scale based on demand without manual intervention.
Networking and Security:

Builds in CodeBuild are run in secure, isolated environments. You can configure builds to run in a VPC (Virtual Private Cloud) to have network-level control, enabling access to other AWS services or private resources.
CodeBuild uses IAM roles and policies to manage permissions securely, ensuring that each build process can access only the resources it requires.
Storage:

Temporary storage for build artifacts and caching is provisioned on the EC2 instanceâ€™s local storage or attached storage.
For longer-term storage of artifacts, CodeBuild integrates with Amazon S3, and for caching dependencies, it supports S3 as well.
This architecture leverages the flexibility and scalability of EC2 and Docker to offer a consistent and isolated build environment that can accommodate various workloads on-demand.




What cloudwatch metrics does AWS CodeBuild support ?
ChatGPT said:
ChatGPT
AWS CodeBuild provides a range of Amazon CloudWatch metrics to help you monitor and optimize your build processes. Here are the key metrics supported by CodeBuild:

1. Build Metrics
Builds: Total number of builds processed within a specified time frame.
BuildsSucceeded: Number of successful builds completed.
BuildsFailed: Number of failed builds.
BuildsStopped: Number of builds that were manually stopped.
Duration: Duration (in milliseconds) for each build from start to completion.
2. Compute Metrics
CPUUtilization: The percentage of CPU capacity used by the build.
MemoryUtilization: The percentage of memory capacity used by the build.
3. Disk I/O Metrics
DiskReadBytes: Total bytes read from disk during the build.
DiskWriteBytes: Total bytes written to disk during the build.
4. Network Metrics
NetworkIn: Total bytes received by the build environment.
NetworkOut: Total bytes sent from the build environment.
5. Queue Metrics
Queued: Number of builds in a queue, waiting for resources to start the build process.
6. Other Custom Metrics
If you have additional build steps that emit custom CloudWatch metrics (e.g., via AWS SDK or CLI within the build), these can also be monitored in CloudWatch.
Dimensions for CodeBuild Metrics
ProjectName: Name of the CodeBuild project.
BuildId: Unique identifier of a specific build.
BuildStatus: Status of the build (e.g., "SUCCEEDED", "FAILED").
You can use these metrics to set up CloudWatch Alarms for proactive monitoring, such as triggering notifications on build failures, unusual CPU or memory usage, or queue backlog, helping you keep track of build health and performance.

